#pragma once

//#include "server/game/servergamestate.hpp"
#include "shared/game/sharedobject.hpp"
#include "shared/utilities/smartvector.hpp"
#include "shared/utilities/serialize_macro.hpp"
#include "shared/utilities/config.hpp"
#include "server/game/constants.hpp"

#include <memory>
#include <chrono>
#include <vector>

enum class GamePhase {
	TITLE_SCREEN,
	LOBBY,
	GAME
};

/**
 * @brief Information about the current lobby of players.
 */
struct Lobby {
	//	TODO: Perhaps instead of a mapping from EntityID -> string, the mapping
	//	could eventually be EntityID -> Player (where Player derives from
	//	Object)?

	/**
	 * @brief A hash table that maps from player's EntityID to their names.
	 */
	std::unordered_map<EntityID, std::string> players;

	/**
	 * @brief The maximum number of players that this game instance can support.
	 */
	int max_players;

	//	TODO: Add a player role listing? I.e., which player is playing which
	//	character and which player is playing as the Dungeon Master?
};

/**
 * @brief The SharedGameState is a representation of the ServerGameState
 * instance maintained by the server and is generated by the server in every
 * timestep. It is intended only for use by the client(s).
 */
struct SharedGameState {
	std::vector<std::shared_ptr<SharedObject>> objects;

	std::chrono::milliseconds timestep_length;

	unsigned int timestep;

	Lobby lobby;

	GamePhase phase;

	SharedGameState():
		objects(std::vector<std::shared_ptr<SharedObject>>())
	{
		this->objects.reserve(MAX_NUM_OBJECTS);
		this->phase = GamePhase::TITLE_SCREEN;
		this->timestep = FIRST_TIMESTEP;
		this->timestep_length = TIMESTEP_LEN;
		this->lobby.max_players = MAX_PLAYERS;
	}

	SharedGameState(GamePhase start_phase, const GameConfig& config):
		objects(std::vector<std::shared_ptr<SharedObject>>())
	{
		this->objects.reserve(MAX_NUM_OBJECTS);
		this->phase = start_phase;
		this->timestep = FIRST_TIMESTEP;
		this->timestep_length = config.game.timestep_length_ms;
		this->lobby.max_players = config.server.max_players;
	}

	DEF_SERIALIZE(Archive& ar, const unsigned int version) {
		ar & phase& lobby.max_players & lobby.players & objects;
	}
};