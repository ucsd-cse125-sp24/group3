#pragma once

#include <memory>
#include <string>
#include <chrono>
#include <vector>
#include <boost/serialization/string.hpp>

//#include "server/game/servergamestate.hpp"
#include "shared/game/sharedobject.hpp"
#include "shared/utilities/smartvector.hpp"
#include "shared/utilities/serialize_macro.hpp"
#include "shared/utilities/config.hpp"
#include "server/game/constants.hpp"


enum class GamePhase {
	TITLE_SCREEN,
	LOBBY,
	GAME,
	RESULTS
};

enum class MatchPhase {
	MazeExploration,
	RelayRace
};

/**
 * @brief Information about the current lobby of players.
 */
struct Lobby {
	/**
	 * @brief name of the lobby as set by the server
	 */
	std::string name;

	/**
	 * @brief A hash table that maps from player's EntityID to their names.
	 */
	std::unordered_map<EntityID, std::string> players;

	/**
	 * @brief The maximum number of players that this game instance can support.
	 */
	int max_players;


	DEF_SERIALIZE(Archive& ar, unsigned int version) {
		ar & name & players & max_players;
	}

	//	TODO: Add a player role listing? I.e., which player is playing which
	//	character and which player is playing as the Dungeon Master?
};

/**
 * @brief The SharedGameState is a representation of the ServerGameState
 * instance maintained by the server and is generated by the server in every
 * timestep. It is intended only for use by the client(s).
 */
struct SharedGameState {
	std::unordered_map<EntityID, boost::optional<SharedObject>> objects;

	std::chrono::milliseconds timestep_length;

	unsigned int timestep;

	Lobby lobby;

	GamePhase phase;

	MatchPhase matchPhase;

	std::chrono::milliseconds time_left;

	bool playerVictory;

	SharedGameState():
		objects(std::unordered_map<EntityID, boost::optional<SharedObject>>())
	{
		this->phase = GamePhase::TITLE_SCREEN;
		this->timestep = FIRST_TIMESTEP;
		this->timestep_length = TIMESTEP_LEN;
		this->lobby.max_players = MAX_PLAYERS;
	}

	SharedGameState(GamePhase start_phase, const GameConfig& config):
		objects(std::unordered_map<EntityID, boost::optional<SharedObject>>())
	{
		this->phase = start_phase;
		this->timestep = FIRST_TIMESTEP;
		this->timestep_length = config.game.timestep_length_ms;
		this->lobby.max_players = config.server.max_players;
		this->lobby.name = config.server.lobby_name;
	}

	DEF_SERIALIZE(Archive& ar, const unsigned int version) {
		ar & phase & lobby & objects;
	}

	/**
	 * Updates this SharedGameState with the changes from the incoming SharedGameState
	 * 
	 * @param update New Partial gamestate update from the server
	 */
	void update(const SharedGameState& update);
};